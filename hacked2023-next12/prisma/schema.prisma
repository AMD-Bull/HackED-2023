generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Professor {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  course_quality Float
  communication  Float
  teaching_quality Float
  overall       Float
  courses    prof_has_course[]
  currently_teaching   courseOffering[]
}

model Course {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  title      String 
  course_quality Float
  knowledge_increase Float
  description String
  overall Float
  professors prof_has_course[]
  offerings  courseOffering[]
}

model courseOffering {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  course_name String 
  day         String
  time        String
  course_code Int
  course_id   String    @db.ObjectId
  prof_id     String    @db.ObjectId
  course      Course    @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  professor   Professor @relation(fields: [prof_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course_labs courseLab[]
}

model courseLab {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  offering_id      String    @db.ObjectId
  day              String
  time             String
  course_code      Int
  course_offering  courseOffering @relation(fields: [offering_id], references: [id], onDelete: Cascade, onUpdate: Cascade)  
}

model prof_has_course {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  course_id          String @db.ObjectId
  course_quality     Float
  feedback           Float
  goals_obj          Float
  instructor_clarity Float
  instructor_quality Float
  knowledge          Float
  motivation         Float
  preparedness       Float
  prof_id            String @db.ObjectId
  student_respect    Float
  time_use           Float
  total_comm_score   Float
  total_course_score Float
  total_score        Float
  professor  Professor @relation(fields: [prof_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  course     Course    @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction) 
}